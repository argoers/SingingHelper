@echo off
:: Disable echoing of commands in the terminal (cleaner output)

cd frontend
:: Change directory into the 'frontend' folder

:: Build the frontend project using npm
call npm run build
:: 'call' is used so that after 'npm run build' finishes, the script continues

:: Check if the 'deploy' folder exists, and create it if it doesn't
if not exist deploy mkdir deploy

:: Copy the entire 'dist' folder (the frontend build output) into 'deploy\static'
robocopy dist deploy\static /E
:: /E copies all subfolders, including empty ones

:: Copy all backend Python (.py) files from '../backend/src' into 'deploy'
robocopy ..\backend\src deploy *.py
:: Only copies Python files; ignores other file types

:: Copy the favicon.ico (tab icon) from 'public' to 'deploy'
copy public\favicon.ico deploy\favicon.ico

cd deploy
:: Enter the 'deploy' directory where backend and frontend are now merged

:: Create the executable (EXE) file using PyInstaller
pyinstaller --onefile --noconsole --name "SingingHelper" ^
  --add-data "static;static" --add-data ".;." ^
  --icon "favicon.ico" ^
  --workpath . --specpath . --distpath ..\.. app_build.py
:: --onefile: bundle into a single .exe
:: --noconsole: no command window (good for GUIs)
:: --name: name the executable "SingingHelper"
:: --add-data: include static assets and backend files inside the executable
:: --icon: set the executable icon
:: --workpath, --specpath, --distpath: set work, spec, and output folders to keep everything tidy

:: After building, clean up:
cd ..
:: Go back up one level (out of 'deploy')

rmdir /s /q deploy
:: Delete the 'deploy' folder and all contents (/s = all subfolders, /q = no confirmation)

rmdir /s /q dist
:: Delete the 'dist' folder generated by npm build

cd ..
:: Go back to the original base directory
